{"version":3,"sources":["components/Error.js","components/Formulario.js","components/Imagen.js","components/ListadoImagen.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImagen","imagenes","map","key","id","App","busqueda","setImagenes","paginaActual","setPaginaActual","totalPaginas","setTotalPaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarAPI","onClick","nuevaPaginaActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a34b80eb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Error = ({mensaje}) => {\r\n  return (\r\n    <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Error } from './Error'\r\n\r\nexport const Formulario = ({setBusqueda}) => {\r\n\r\n  const [termino, setTermino] = useState('')\r\n  const [error, setError] = useState(false)\r\n\r\n  const buscarImagenes = (e) => {\r\n    e.preventDefault()\r\n\r\n    // validar\r\n    if (termino.trim()==='') {\r\n      setError(true)\r\n      return\r\n    }\r\n    setError(false)\r\n    \r\n    // enviar el termino de busqueda hacia el componente principal\r\n    setBusqueda(termino)\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={buscarImagenes}\r\n    >\r\n      <div className=\"row\">\r\n        <div className=\"form-group col-md-8\">\r\n          <input \r\n            type=\"text\"\r\n            className=\"form-control from-control-lg\"\r\n            placeholder=\"Busca una imagen. Ejemplo: café\"\r\n            onChange={e=>setTermino(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group col-md-4\">\r\n          <input \r\n            type=\"submit\"\r\n            className=\"btn btn-lg btn-danger btn-block\"\r\n            value=\"Buscar\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {error ? <Error mensaje=\"Agrega una palabra para hacer la búsqueda\" /> : null}\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Imagen = ({imagen}) => {\r\n  // extraer las variables\r\n  const {largeImageURL, likes, previewURL, tags, views} = imagen\r\n  \r\n  return (\r\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-5\">\r\n      <div className=\"card\">\r\n        <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n        <div className=\"card-body\">\r\n          <p className=\"card-text\">{likes} Me gusta</p>\r\n          <p className=\"card-text\">{views} Vistas</p>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <a\r\n            href={largeImageURL}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"btn btn-primary btn-block\"\r\n          >Ver Imagen</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Imagen } from './Imagen'\r\n\r\nexport const ListadoImagen = ({imagenes}) => {\r\n  return (\r\n    <div className=\"col-12 p-5 row\">\r\n      {imagenes.map(imagen =>(\r\n          <Imagen \r\n            key={imagen.id}\r\n            imagen={imagen}\r\n          />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport { Formulario } from './components/Formulario';\nimport { ListadoImagen } from './components/ListadoImagen';\n\nfunction App() {\n\n  // state de la app\n  const [busqueda, setBusqueda] = useState('')\n\n  const [imagenes, setImagenes] = useState([])\n\n  // states para agregar el paginador\n  const [paginaActual, setPaginaActual] = useState(1)\n\n  const [totalPaginas, setTotalPaginas] = useState(1)\n\n\n  useEffect(()=>{\n    const consultarAPI= async()=>{\n      // al cargar el componenete la primera vez va a tratar de hacer la busqueda\n      // con este if hacemos que no haga nada\n      if (busqueda==='') {\n        return\n      }\n\n      const imagenesPorPagina= 30\n      const key='17729159-0cefb3226e8ccb9863d85cb38'\n      // per_page es un parametro que nos da la API para poder decirle cuandotas imagenes queremos\n      // que nos retorne por pagina. Siempre cuando se va a paginar hay que decirle a backend que \n      // nos de un endpoint que haga eso.\n      const url=`https://pixabay.com/api/?key=${key}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaActual}`\n    \n      const respuesta = await fetch(url)\n\n      const resultado = await respuesta.json()\n\n      // console.log(resultado.hits)\n      setImagenes(resultado.hits)\n\n      // calcular el total de paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits/imagenesPorPagina)\n\n      setTotalPaginas(calcularTotalPaginas)\n\n      // Mover la pantalla hacia arriba\n      const jumbotron= document.querySelector('.jumbotron')\n      jumbotron.scrollIntoView({behavior:'smooth'})\n    }\n    consultarAPI()\n  }, [busqueda,paginaActual])\n\n  // definir la pagina anterior\n  const paginaAnterior=()=>{\n    const nuevaPaginaActual=paginaActual-1\n    if (nuevaPaginaActual===0) {\n      return\n    }\n    setPaginaActual(nuevaPaginaActual)\n  }\n\n  // definir la pagina siguiente\n  const paginaSiguiente=()=>{\n    const nuevaPaginaActual=paginaActual+1\n    if (nuevaPaginaActual>totalPaginas) {\n      return\n    }\n    setPaginaActual(nuevaPaginaActual)\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"display-4 text-center mb-5\">Buscador de imagenes</p>\n        <Formulario \n          setBusqueda={setBusqueda}\n        />\n      </div>\n\n      <div className=\"row justify-content-center\">\n        <ListadoImagen\n          imagenes={imagenes}\n        />\n        {(paginaActual===1)? null : (\n        <button\n          type=\"button\"\n          className=\"btn btn-info mr-1\"\n          onClick={paginaAnterior}\n          >\n          &laquo; Anterior\n          </button>\n        )}\n        \n        {(paginaActual===totalPaginas) ? null : (\n          <button\n          type=\"button\"\n          className=\"btn btn-info\"\n          onClick={paginaSiguiente}\n          >\n          Siguiente &raquo;\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}